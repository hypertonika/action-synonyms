from aiogram import Router, types, F
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    CallbackQuery,
    ReplyKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.filters import CommandStart, Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from app.keyboards import main
import json
import os
import motor.motor_asyncio
import asyncio
from fuzzywuzzy import process
import random
import re

ADMINS = [549021481]

# MongoDB configuration
MONGO_URI = os.environ.get("MONGO_URI")
DB_NAME = "bot_database"

client = motor.motor_asyncio.AsyncIOMotorClient(MONGO_URI)
db = client[DB_NAME]
dictionary_col = db["dictionary"]
quiz_col = db["quiz_data"]
mining_words_col = db["mining_words"]
mining_quizzes_col = db["mining_quizzes"]  
router = Router()


# FSM –¥–ª—è –∫–≤–∏–∑–∞
class QuizState(StatesGroup):
    waiting_for_answer = State()
    quiz_data = State()
    current_question = State()
    score = State()


@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç-—Å–ª–æ–≤–∞—Ä—å. –ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π –∏ –∫–∞–∑–∞—Ö—Å–∫–∏–π.\n\n"
        "üë®‚Äçüè´ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "üîπ `/help` - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞\n"
        "üîπ `/list` - —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –±—É–∫–≤—É\n"
        "üîπ `/add_word` - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)\n\n"
        "üí° –í–≤–µ–¥–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, —á—Ç–æ–±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é.",
        reply_markup=main,
        parse_mode="Markdown",
    )


@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "üìö *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –∏ —Å–∏–Ω–æ–Ω–∏–º—ã.\n"
        "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/list`, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –±—É–∫–≤—É –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–∞.\n"
        "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/random_word`, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ.\n"
        "4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/flashcards`, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º.\n"
        "5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/start_quiz`, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.\n"
        "6. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `/add_word`.\n\n"
        "üí° –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤–≤–µ–¥–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞', —á—Ç–æ–±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é.\n\n"
        "üë®‚Äçüè´ *–ö–æ–º–∞–Ω–¥—ã:*\n"
        "üîπ `/start` - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "üîπ `/list` - —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –ø–æ –±—É–∫–≤–∞–º\n"
        "üîπ `/help` - –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏\n"
        "üîπ `/add_word` - –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)\n"
        "üîπ `/random_word` - –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ\n"
        "üîπ `/flashcards` - —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è –ø–æ –∫–∞—Ä—Ç–æ—á–∫–∞–º\n"
        "üîπ `/start_quiz` - –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É",
        parse_mode="Markdown",
    )


# FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
class AddWord(StatesGroup):
    waiting_for_word = State()
    waiting_for_synonyms = State()
    waiting_for_ru_translation = State()
    waiting_for_kz_translation = State()
    confirmation = State()


def confirmation_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_addition")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_addition")
    return builder.as_markup()


def cancel_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_addition")
    return builder.as_markup()


@router.message(Command("add_word"))
async def start_add_word(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤.")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:", reply_markup=cancel_keyboard())
    await state.set_state(AddWord.waiting_for_word)


@router.message(AddWord.waiting_for_word)
async def get_english_word(message: types.Message, state: FSMContext):
    # –ü—Ä–∏–≤–æ–¥–∏–º —Å–ª–æ–≤–æ –∫ –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤–µ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
    await state.update_data(word=message.text.strip().capitalize())
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å–∏–Ω–æ–Ω–∏–º—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:", reply_markup=cancel_keyboard()
    )
    await state.set_state(AddWord.waiting_for_synonyms)


@router.message(AddWord.waiting_for_synonyms)
async def get_synonyms(message: types.Message, state: FSMContext):
    synonyms = [s.strip() for s in message.text.split(",")]
    await state.update_data(synonyms=synonyms)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥:", reply_markup=cancel_keyboard())
    await state.set_state(AddWord.waiting_for_ru_translation)


@router.message(AddWord.waiting_for_ru_translation)
async def get_russian_translation(message: types.Message, state: FSMContext):
    await state.update_data(ru=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞–∑–∞—Ö—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥:", reply_markup=cancel_keyboard())
    await state.set_state(AddWord.waiting_for_kz_translation)


@router.message(AddWord.waiting_for_kz_translation)
async def get_kazakh_translation(message: types.Message, state: FSMContext):
    await state.update_data(kz=message.text.strip())

    data = await state.get_data()
    word_info = (
        f"üîπ **–°–ª–æ–≤–æ**: {data['word']}\n"
        f"üîπ **–°–∏–Ω–æ–Ω–∏–º—ã**: {', '.join(data['synonyms'])}\n"
        f"üîπ **–†—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥**: {data['ru']}\n"
        f"üîπ **–ö–∞–∑–∞—Ö—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥**: {data['kz']}"
    )

    await message.answer(
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º:\n\n{word_info}",
        parse_mode="Markdown",
        reply_markup=confirmation_keyboard(),
    )
    await state.set_state(AddWord.confirmation)


@router.callback_query(F.data == "cancel_addition")
async def cancel_addition(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()


@router.callback_query(F.data == "confirm_addition")
async def confirm_addition(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–æ –≤ MongoDB —Å upsert-–æ–ø–µ—Ä–∞—Ü–∏–µ–π
    await dictionary_col.update_one(
        {"word": data["word"]},
        {"$set": {"synonyms": data["synonyms"], "ru": data["ru"], "kz": data["kz"]}},
        upsert=True,
    )
    await callback_query.message.edit_text("‚úÖ –°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å!")
    await state.clear()


@router.message(Command("list"))
async def cmd_list(message: Message):
    keyboard = await generate_alphabet_keyboard()
    await message.answer(
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ –ö–∞—Ç–µ–≥–æ—Ä–∏—é, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤:", reply_markup=keyboard
    )


async def generate_alphabet_keyboard():
    alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    builder = InlineKeyboardBuilder()
    for letter in alphabet:
        builder.button(text=letter, callback_data=f"letter_{letter}")
    builder.adjust(6)
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ä—è–¥ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ mining words
    builder.row()
    builder.button(text="Mining words", callback_data="mining_words")
    return builder.as_markup()


@router.callback_query(lambda c: c.data == "mining_words")
async def handle_mining_words(callback_query: CallbackQuery):
    cursor = mining_words_col.find({})
    docs = await cursor.to_list(length=None)
    words = sorted([doc["word"] for doc in docs])

    if words:
        response = "üìÉ *Mining words:*\n\n" + "\n".join(f"üîπ {word}" for word in words)
    else:
        response = "‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è mining words –ø—É—Å—Ç–∞."

    await callback_query.message.edit_text(response, parse_mode="Markdown")


@router.callback_query(lambda c: c.data and c.data.startswith("letter_"))
async def handle_letter_selection(callback_query: CallbackQuery):
    letter = callback_query.data.split("_")[1]
    cursor = dictionary_col.find({"word": {"$regex": f"^{letter}"}})
    docs = await cursor.to_list(length=None)
    words = sorted([doc["word"] for doc in docs])

    if words:
        response = f"üìÉ *–°–ª–æ–≤–∞ –Ω–∞ –±—É–∫–≤—É {letter}:*\n\n" + "\n".join(
            f"üîπ {word}" for word in words
        )
    else:
        response = f"‚ö†Ô∏è –ù–∞ –±—É–∫–≤—É {letter} –Ω–µ—Ç —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ."

    await callback_query.message.edit_text(response, parse_mode="Markdown")


@router.message(Command("random_word"))
async def cmd_random_word(message: Message):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≥—Ä–µ–≥–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    docs = await dictionary_col.aggregate([{"$sample": {"size": 1}}]).to_list(length=1)
    if not docs:
        await message.answer(
            "‚ö†Ô∏è –°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `/add_word`."
        )
        return

    doc = docs[0]
    word = doc.get("word")
    synonyms = doc.get("synonyms", [])
    ru = doc.get("ru", "–ù–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞")
    kz = doc.get("kz", "–ù–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞")

    response = (
        f"‚ú® *–°–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ: {word}*\n\n"
        f"üîπ *–°–∏–Ω–æ–Ω–∏–º—ã*: {', '.join(synonyms) if synonyms else '–ù–µ—Ç —Å–∏–Ω–æ–Ω–∏–º–æ–≤'}\n"
        f"üî∏ *–ù–∞ —Ä—É—Å—Å–∫–æ–º*: {ru}\n"
        f"üî∏ *–ù–∞ –∫–∞–∑–∞—Ö—Å–∫–æ–º*: {kz}"
    )

    await message.answer(response, parse_mode="Markdown")


# FSM –¥–ª—è —Ä–µ–∂–∏–º–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
class FlashcardState(StatesGroup):
    viewing = State()


def escape_markdown_v2(text: str) -> str:
    return re.sub(r"([_\*\[\]()~`>#+\-=|{}.!])", r"\\\1", text)


def generate_flashcard(word, synonyms, ru_translation, kz_translation):
    word = escape_markdown_v2(word)
    synonyms = [escape_markdown_v2(syn) for syn in synonyms]
    ru_translation = escape_markdown_v2(ru_translation)
    kz_translation = escape_markdown_v2(kz_translation)

    return (
        f"‚ú® *{word}*\n\n"
        f"üîπ *–°–∏–Ω–æ–Ω–∏–º—ã: *||{', '.join(synonyms)}||\n"
        f"üî∏ *–ù–∞ —Ä—É—Å—Å–∫–æ–º: *||{ru_translation}||\n"
        f"üî∏ *–ù–∞ –∫–∞–∑–∞—Ö—Å–∫–æ–º: *||{kz_translation}||"
    )


def generate_flashcard_navigation_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–ª–æ–≤–æ", callback_data="previous_word"
                ),
                InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ", callback_data="next_word"),
            ],
            [InlineKeyboardButton(text="–í—ã—Ö–æ–¥", callback_data="exit_flashcards")],
        ]
    )
    return keyboard


@router.message(Command("flashcards"))
async def start_flashcards(message: Message, state: FSMContext):
    user_data = await state.get_data()
    if "message_id" in user_data:
        try:
            await message.bot.delete_message(
                chat_id=message.chat.id, message_id=user_data["message_id"]
            )
        except Exception:
            pass

    docs = await dictionary_col.find({}).to_list(length=None)
    if not docs:
        await message.answer(
            "‚ö†Ô∏è –°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `/add_word`."
        )
        return

    words = [doc["word"] for doc in docs]
    random.shuffle(words)
    current_index = 0
    await state.update_data(words=words, current_index=current_index)

    doc = await dictionary_col.find_one({"word": words[current_index]})
    response = generate_flashcard(
        doc["word"], doc.get("synonyms", []), doc.get("ru", ""), doc.get("kz", "")
    )
    keyboard = generate_flashcard_navigation_keyboard()

    msg = await message.answer(response, reply_markup=keyboard, parse_mode="MarkdownV2")
    await state.update_data(message_id=msg.message_id)
    await state.set_state(FlashcardState.viewing)


@router.callback_query(FlashcardState.viewing, F.data == "next_word")
async def next_word(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    current_index = user_data["current_index"]
    words = user_data["words"]

    current_index = (current_index + 1) % len(words)
    await state.update_data(current_index=current_index)

    doc = await dictionary_col.find_one({"word": words[current_index]})
    response = generate_flashcard(
        doc["word"], doc.get("synonyms", []), doc.get("ru", ""), doc.get("kz", "")
    )
    keyboard = generate_flashcard_navigation_keyboard()

    await callback_query.message.delete()
    msg = await callback_query.message.answer(
        response, reply_markup=keyboard, parse_mode="MarkdownV2"
    )
    await state.update_data(message_id=msg.message_id)


@router.callback_query(FlashcardState.viewing, F.data == "previous_word")
async def previous_word(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    current_index = user_data["current_index"]
    words = user_data["words"]

    current_index = (current_index - 1) % len(words)
    await state.update_data(current_index=current_index)

    doc = await dictionary_col.find_one({"word": words[current_index]})
    response = generate_flashcard(
        doc["word"], doc.get("synonyms", []), doc.get("ru", ""), doc.get("kz", "")
    )
    keyboard = generate_flashcard_navigation_keyboard()

    await callback_query.message.delete()
    msg = await callback_query.message.answer(
        response, reply_markup=keyboard, parse_mode="MarkdownV2"
    )
    await state.update_data(message_id=msg.message_id)


@router.callback_query(FlashcardState.viewing, F.data == "exit_flashcards")
async def exit_flashcards(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∫–∞—Ä—Ç–æ—á–µ–∫.")
    await state.clear()
    await callback_query.message.answer("–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–≤–∏–∑–∞ (–æ–±—â–∏–µ —Ç–µ—Å—Ç—ã)
def generate_options_keyboard(options):
    keyboard = []
    for option in options:
        keyboard.append(
            [InlineKeyboardButton(text=option, callback_data=f"answer_{option[0]}")]
        )
    keyboard.append([InlineKeyboardButton(text="–í—ã—Ö–æ–¥ ‚Ü©", callback_data="exit_quiz")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


async def check_quiz_in_progress(state: FSMContext):
    user_data = await state.get_data()
    return "current_question" in user_data


def build_general_quiz_keyboard():
    keyboard = InlineKeyboardBuilder()

    # --- –°—Ç—Ä–æ–∫–∞ 1: 1..6
    keyboard.row(
        InlineKeyboardButton(text="1", callback_data="quiz_1"),
        InlineKeyboardButton(text="2", callback_data="quiz_2"),
        InlineKeyboardButton(text="3", callback_data="quiz_3"),
        InlineKeyboardButton(text="4", callback_data="quiz_4"),
        InlineKeyboardButton(text="5", callback_data="quiz_5"),
        InlineKeyboardButton(text="6", callback_data="quiz_6"),
    )

    # --- –°—Ç—Ä–æ–∫–∞ 2: 7..12
    keyboard.row(
        InlineKeyboardButton(text="7", callback_data="quiz_7"),
        InlineKeyboardButton(text="8", callback_data="quiz_8"),
        InlineKeyboardButton(text="9", callback_data="quiz_9"),
        InlineKeyboardButton(text="10", callback_data="quiz_10"),
        InlineKeyboardButton(text="11", callback_data="quiz_11"),
        InlineKeyboardButton(text="12", callback_data="quiz_12"),
    )

    # --- –°—Ç—Ä–æ–∫–∞ 3: 13..18
    keyboard.row(
        InlineKeyboardButton(text="13", callback_data="quiz_13"),
        InlineKeyboardButton(text="14", callback_data="quiz_14"),
        InlineKeyboardButton(text="15", callback_data="quiz_15"),
        InlineKeyboardButton(text="16", callback_data="quiz_16"),
        InlineKeyboardButton(text="17", callback_data="quiz_17"),
        InlineKeyboardButton(text="18", callback_data="quiz_18"),
    )

    # --- –°—Ç—Ä–æ–∫–∞ 4: 19..20
    keyboard.row(
        InlineKeyboardButton(text="19", callback_data="quiz_19"),
        InlineKeyboardButton(text="20", callback_data="quiz_20"),
    )

    # --- –°—Ç—Ä–æ–∫–∞ 5: –∫–Ω–æ–ø–∫–∞ ¬´–ü–µ—Ä–µ–π—Ç–∏‚Ä¶¬ª
    keyboard.row(
        InlineKeyboardButton(
            text="–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ç–µ—Å—Ç–∞–º (–ù–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º) ‚û°Ô∏è",
            callback_data="switch_to_mining_quizzes",
        )
    )

    return keyboard


@router.message(Command("start_quiz"))
async def choose_quiz(message: Message, state: FSMContext):
    if await check_quiz_in_progress(state):
        await message.answer(
            "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∫–≤–∏–∑, –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π."
        )
        return

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –≤–æ–∑–≤—Ä–∞—â–∞—é—â—É—é –≥–æ—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = build_general_quiz_keyboard()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=keyboard.as_markup())


@router.callback_query(lambda c: c.data == "switch_to_mining_quizzes")
async def switch_to_mining_quizzes(callback_query: CallbackQuery):
    # –Ø–≤–Ω–æ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ _id (–µ—Å–ª–∏ —Ö–æ—Ç–∏–º –≤ –ø–æ—Ä—è–¥–∫–µ –≤—Å—Ç–∞–≤–∫–∏)
    cursor = mining_quizzes_col.find({}).sort("_id", 1)
    docs = await cursor.to_list(length=None)

    unique_sections = []
    seen = set()
    # –°–æ–±–∏—Ä–∞–µ–º —Ä–∞–∑–¥–µ–ª—ã –≤ —Ç–æ–º –ø–æ—Ä—è–¥–∫–µ, –≤ –∫–∞–∫–æ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–¥—É—Ç –≤ –±–∞–∑–µ
    for doc in docs:
        section = doc["section"]
        if section not in seen:
            unique_sections.append(section)
            seen.add(section)

    keyboard = InlineKeyboardBuilder()
    # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ä—è–¥—É (–ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç)
    for section in unique_sections:
        keyboard.button(text=section, callback_data=f"mining_quiz::{section}")
    keyboard.adjust(1)

    keyboard.row()
    keyboard.button(
        text="–ù–∞–∑–∞–¥ –∫ –æ–±—â–∏–º —Ç–µ—Å—Ç–∞–º ‚Ü©Ô∏è", callback_data="switch_to_general_quizzes"
    )
    keyboard.adjust(1)

    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤:", reply_markup=keyboard.as_markup()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –æ–±—â–∏–º —Ç–µ—Å—Ç–∞–º
@router.callback_query(lambda c: c.data == "switch_to_general_quizzes")
async def switch_to_general_quizzes(callback_query: CallbackQuery):
    # –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ–±—ã —Ä–∞—Å–∫–ª–∞–¥–∫–∞ –±—ã–ª–∞ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ–π
    keyboard = build_general_quiz_keyboard()
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=keyboard.as_markup()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–≤–∏–∑–∞
@router.callback_query(lambda c: c.data and c.data.startswith("mining_quiz::"))
async def start_mining_quiz(callback_query: CallbackQuery, state: FSMContext):
    section = callback_query.data.split("::")[1]
    doc = await mining_quizzes_col.find_one({"section": section})
    if not doc:
        await callback_query.message.edit_text("‚ùå –§–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    quiz_data = doc.get("questions", [])
    await state.update_data(quiz_data=quiz_data, current_question=0, score=0)
    first_question = quiz_data[0]
    keyboard = generate_options_keyboard(first_question["options"])
    await callback_query.message.edit_text(
        f"–í–æ–ø—Ä–æ—Å 1: {first_question['question']}", reply_markup=keyboard
    )
    await state.set_state(QuizState.waiting_for_answer)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—â–∏—Ö —Ç–µ—Å—Ç–æ–≤ (—Å—Ç–∞—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
@router.callback_query(lambda c: c.data.startswith("quiz_"))
async def start_selected_quiz(callback_query: CallbackQuery, state: FSMContext):
    if await check_quiz_in_progress(state):
        await callback_query.message.edit_text(
            "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∫–≤–∏–∑, –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π."
        )
        return

    section_number = callback_query.data.split("_")[1]
    try:
        section = int(section_number)
    except ValueError:
        await callback_query.message.edit_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–∞–∑–¥–µ–ª–∞.")
        return

    doc = await quiz_col.find_one({"section": section})
    if not doc:
        await callback_query.message.edit_text("‚ùå –§–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    quiz_data = doc.get("questions", [])
    await state.update_data(quiz_data=quiz_data, current_question=0, score=0)
    first_question = quiz_data[0]
    keyboard = generate_options_keyboard(first_question["options"])
    await callback_query.message.edit_text(
        f"–í–æ–ø—Ä–æ—Å 1: {first_question['question']}", reply_markup=keyboard
    )
    await state.set_state(QuizState.waiting_for_answer)


@router.callback_query(lambda c: c.data.startswith("answer_"))
async def handle_quiz_answer(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    current_question = user_data["current_question"]
    quiz_data = user_data["quiz_data"]
    score = user_data["score"]

    user_answer = callback_query.data.split("_")[1]
    correct_answer = quiz_data[current_question]["correct_answer"][0]

    if user_answer == correct_answer:
        score += 1
        result_text = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
    else:
        result_text = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {quiz_data[current_question]['correct_answer']}"

    current_question += 1

    if current_question < len(quiz_data):
        next_question = quiz_data[current_question]
        keyboard = generate_options_keyboard(next_question["options"])
        await callback_query.message.edit_text(
            f"{result_text}\n\n–í–æ–ø—Ä–æ—Å {current_question + 1}: {next_question['question']}",
            reply_markup=keyboard,
        )
        await state.update_data(current_question=current_question, score=score)
    else:
        await callback_query.message.edit_text(
            f"{result_text}\n\n–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{len(quiz_data)}"
        )
        await state.clear()


@router.callback_query(lambda c: c.data == "exit_quiz")
async def exit_quiz(callback_query: CallbackQuery, state: FSMContext):
    if await check_quiz_in_progress(state):
        await callback_query.message.edit_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.clear()
    else:
        await callback_query.message.edit_text(
            "‚ùå –ö–≤–∏–∑ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )


@router.message()
async def handle_word(message: Message):
    # –ë–µ—Ä–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–ª–æ–≤–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞
    word = message.text.strip()
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ä–µ–≥–∏—Å—Ç—Ä
    regex = f"^{re.escape(word)}$"
    doc = await dictionary_col.find_one({"word": {"$regex": regex, "$options": "i"}})

    if doc:
        synonyms = doc.get("synonyms", [])
        ru = doc.get("ru", "")
        kz = doc.get("kz", "")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        response = (
            f"‚ú® *{doc['word']}*\n\n"
            f"üîπ *–°–∏–Ω–æ–Ω–∏–º—ã*: {', '.join(synonyms)}\n"
            f"üî∏ *–ù–∞ —Ä—É—Å—Å–∫–æ–º*: {ru}\n"
            f"üî∏ *–ù–∞ –∫–∞–∑–∞—Ö—Å–∫–æ–º*: {kz}"
        )
    else:
        words_list = await dictionary_col.distinct("word")
        closest_matches = process.extract(word, words_list, limit=3)
        suggestions = "\n".join([f"üîπ {match[0]}" for match in closest_matches])
        response = (
            f"‚ö†Ô∏è –°–ª–æ–≤–æ *{word}* –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä–µ.\n\n"
            f"–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:\n{suggestions}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è."
        )

    await message.answer(response, parse_mode="Markdown")
