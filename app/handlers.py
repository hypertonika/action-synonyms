from aiogram import Router, types, F
from aiogram.types import Message, InlineKeyboardMarkup, CallbackQuery, ReplyKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from app.keyboards import main
import json
import os
from fuzzywuzzy import process
import random
import re
import logging
# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –∏–∑ JSON —Ñ–∞–π–ª–∞
def load_dictionary():
    with open("data.json", "r", encoding="utf-8") as file:
        return json.load(file)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞—Ä—å
dictionary = load_dictionary()

# –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã
ADMINS = [549021481]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ ID

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FSM
class AddWord(StatesGroup):
    waiting_for_word = State()
    waiting_for_synonyms = State()
    waiting_for_ru_translation = State()
    waiting_for_kz_translation = State()
    confirmation = State()

class QuizState(StatesGroup):
    waiting_for_answer = State()
    quiz_data = State()
    current_question = State()
    score = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–∂–∏–º–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
class FlashcardState(StatesGroup):
    viewing = State()


# –ü—É—Ç–∏
JSON_FILE = "data.json"

router = Router()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–≤–∏–∑–∞ –∏–∑ —Ñ–∞–π–ª–∞
def load_quiz_data(filename):
    with open(filename, "r", encoding="utf-8") as file:
        return json.load(file)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
def generate_options_keyboard(options):
    keyboard = []
    for option in options:
        keyboard.append([InlineKeyboardButton(text=option, callback_data=f"answer_{option[0]}")])
    keyboard.append([InlineKeyboardButton(text="–í—ã—Ö–æ–¥ ‚Ü©", callback_data="exit_quiz")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∫–≤–∏–∑–∞
async def check_quiz_in_progress(state: FSMContext):
    user_data = await state.get_data()
    if "current_question" in user_data:  # –ï—Å–ª–∏ –∫–≤–∏–∑ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω
        return True
    return False

# –°—Ç–∞—Ä—Ç –∫–≤–∏–∑–∞
@router.message(Command("start_quiz"))
async def choose_quiz(message: Message, state: FSMContext):
    if await check_quiz_in_progress(state):
        await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∫–≤–∏–∑, –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π.")
        return
    
    keyboard = InlineKeyboardBuilder()
    for i in range(1, 21):
        keyboard.button(text=f"{i}", callback_data=f"quiz_{i}")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=keyboard.as_markup())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥
@router.message()
async def handle_other_commands(message: Message, state: FSMContext):
    if await check_quiz_in_progress(state):
        await message.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã, –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –∫–≤–∏–∑.")
        return
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–≤–∏–∑–∞
@router.callback_query(lambda c: c.data.startswith("quiz_"))
async def start_selected_quiz(callback_query: CallbackQuery, state: FSMContext):
    if await check_quiz_in_progress(state):
        await callback_query.message.edit_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∫–≤–∏–∑, –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π.")
        return
    
    section_number = callback_query.data.split("_")[1]
    filename = f"quiz_data{section_number}.json"
    
    if not os.path.exists(filename):
        await callback_query.message.edit_text("‚ùå –§–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–≤–∏–∑ –Ω–µ –±—ã–ª —É–∂–µ –Ω–∞—á–∞—Ç
    user_data = await state.get_data()
    if "current_question" in user_data:
        await callback_query.message.edit_text("‚ùå –í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∫–≤–∏–∑–∞. –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–∏–π, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π.")
        return

    quiz_data = load_quiz_data(filename)
    await state.update_data(quiz_data=quiz_data, current_question=0, score=0)
    
    first_question = quiz_data[0]
    keyboard = generate_options_keyboard(first_question["options"])
    await callback_query.message.edit_text(
        f"–í–æ–ø—Ä–æ—Å 1: {first_question['question']}", reply_markup=keyboard
    )
    await state.set_state(QuizState.waiting_for_answer)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–∞
@router.callback_query(lambda c: c.data.startswith("answer_"))
async def handle_quiz_answer(callback_query: CallbackQuery, state: FSMContext):
    if await check_quiz_in_progress(state):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
        user_data = await state.get_data()
        current_question = user_data["current_question"]
        quiz_data = user_data["quiz_data"]
        score = user_data["score"]
        
        user_answer = callback_query.data.split("_")[1]  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        correct_answer = quiz_data[current_question]["correct_answer"][0]  # –ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if user_answer == correct_answer:
            score += 1
            result_text = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
        else:
            result_text = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {quiz_data[current_question]['correct_answer']}"
        
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
        current_question += 1
        
        if current_question < len(quiz_data):
            next_question = quiz_data[current_question]
            keyboard = generate_options_keyboard(next_question["options"])
            await callback_query.message.edit_text(
                f"{result_text}\n\n–í–æ–ø—Ä–æ—Å {current_question + 1}: {next_question['question']}",
                reply_markup=keyboard
            )
            await state.update_data(current_question=current_question, score=score)
        else:
            await callback_query.message.edit_text(
                f"{result_text}\n\n–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}/{len(quiz_data)}"
            )
            await state.clear()
    else:
        await callback_query.message.edit_text("‚ùå –ö–≤–∏–∑ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start_quiz –¥–ª—è –Ω–∞—á–∞–ª–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—ã—Ö–æ–¥ –∏–∑ –∫–≤–∏–∑–∞"
@router.callback_query(lambda c: c.data == "exit_quiz")
async def exit_quiz(callback_query: CallbackQuery, state: FSMContext):
    if await check_quiz_in_progress(state):
        await callback_query.message.edit_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–≤–∏–∑–∞
    else:
        await callback_query.message.edit_text("‚ùå –ö–≤–∏–∑ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã.")



def escape_markdown_v2(text: str) -> str:
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2
    return re.sub(r'([_\*\[\]()~`>#+\-=|{}.!])', r'\\\1', text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
def generate_flashcard(word, synonyms, ru_translation, kz_translation):
    word = escape_markdown_v2(word)
    synonyms = [escape_markdown_v2(syn) for syn in synonyms]
    ru_translation = escape_markdown_v2(ru_translation)
    kz_translation = escape_markdown_v2(kz_translation)
    
    return (
        f"‚ú® *{word}*\n\n"
        f"üîπ *–°–∏–Ω–æ–Ω–∏–º—ã: *||{', '.join(synonyms)}||\n"
        f"üî∏ *–ù–∞ —Ä—É—Å—Å–∫–æ–º: *||{ru_translation}||\n"
        f"üî∏ *–ù–∞ –∫–∞–∑–∞—Ö—Å–∫–æ–º: *||{kz_translation}||"
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
def generate_flashcard_navigation_keyboard():
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–ª–æ–≤–æ", callback_data="previous_word"),
                InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ", callback_data="next_word")
            ],
            [InlineKeyboardButton(text="–í—ã—Ö–æ–¥", callback_data="exit_flashcards")]
        ]
    )
    return keyboard

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–∂–∏–º–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
@router.message(Command("flashcards"))
async def start_flashcards(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫
    user_data = await state.get_data()
    if "message_id" in user_data:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.bot.delete_message(chat_id=message.chat.id, message_id=user_data["message_id"])

    words = list(dictionary.keys())
    random.shuffle(words)  # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤
    current_index = 0
    await state.update_data(words=words, current_index=current_index)

    word = words[current_index]
    details = dictionary[word]
    response = generate_flashcard(word, details["synonyms"], details["ru"], details["kz"])
    keyboard = generate_flashcard_navigation_keyboard()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = await message.answer(response, reply_markup=keyboard, parse_mode="MarkdownV2")
    await state.update_data(message_id=msg.message_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑
    await state.set_state(FlashcardState.viewing)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ"
@router.callback_query(FlashcardState.viewing, F.data == "next_word")
async def next_word(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    current_index = user_data["current_index"]
    words = user_data["words"]
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–æ–≤—É
    current_index = (current_index + 1) % len(words)
    await state.update_data(current_index=current_index)

    word = words[current_index]
    details = dictionary[word]
    response = generate_flashcard(word, details["synonyms"], details["ru"], details["kz"])
    keyboard = generate_flashcard_navigation_keyboard()

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    await callback_query.message.delete()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = await callback_query.message.answer(response, reply_markup=keyboard, parse_mode='MarkdownV2')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑
    await state.update_data(message_id=msg.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–ª–æ–≤–æ"
@router.callback_query(FlashcardState.viewing, F.data == "previous_word")
async def previous_word(callback_query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    current_index = user_data["current_index"]
    words = user_data["words"]
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–ª–æ–≤—É
    current_index = (current_index - 1) % len(words)
    await state.update_data(current_index=current_index)

    word = words[current_index]
    details = dictionary[word]
    response = generate_flashcard(word, details["synonyms"], details["ru"], details["kz"])
    keyboard = generate_flashcard_navigation_keyboard()

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    await callback_query.message.delete()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = await callback_query.message.answer(response, reply_markup=keyboard, parse_mode='MarkdownV2')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑
    await state.update_data(message_id=msg.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã—Ö–æ–¥"
@router.callback_query(FlashcardState.viewing, F.data == "exit_flashcards")
async def exit_flashcards(callback_query: CallbackQuery, state: FSMContext):
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ
    await callback_query.message.edit_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∫–∞—Ä—Ç–æ—á–µ–∫.")
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ
    await callback_query.message.answer("–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω.")



def load_data():
    if not os.path.exists(JSON_FILE):
        return {}
    with open(JSON_FILE, "r", encoding="utf-8") as file:
        return json.load(file)

def save_data(data):
    with open(JSON_FILE, "w", encoding="utf-8") as file:
        json.dump(data, file, indent=4, ensure_ascii=False)

def confirmation_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_addition")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_addition")
    return builder.as_markup()

def cancel_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_addition")
    return builder.as_markup()

@router.message(Command("add_word"))
async def start_add_word(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMINS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤.")
        return

    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:", reply_markup=cancel_keyboard())
    await state.set_state(AddWord.waiting_for_word)

@router.message(AddWord.waiting_for_word)
async def get_english_word(message: types.Message, state: FSMContext):
    await state.update_data(word=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–∏–Ω–æ–Ω–∏–º—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:", reply_markup=cancel_keyboard())
    await state.set_state(AddWord.waiting_for_synonyms)

@router.message(AddWord.waiting_for_synonyms)
async def get_synonyms(message: types.Message, state: FSMContext):
    synonyms = [s.strip() for s in message.text.split(",")]
    await state.update_data(synonyms=synonyms)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥:", reply_markup=cancel_keyboard())
    await state.set_state(AddWord.waiting_for_ru_translation)

@router.message(AddWord.waiting_for_ru_translation)
async def get_russian_translation(message: types.Message, state: FSMContext):
    await state.update_data(ru=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞–∑–∞—Ö—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥:", reply_markup=cancel_keyboard())
    await state.set_state(AddWord.waiting_for_kz_translation)

@router.message(AddWord.waiting_for_kz_translation)
async def get_kazakh_translation(message: types.Message, state: FSMContext):
    await state.update_data(kz=message.text.strip())
    
    data = await state.get_data()
    word_info = (
        f"üîπ **–°–ª–æ–≤–æ**: {data['word']}\n"
        f"üîπ **–°–∏–Ω–æ–Ω–∏–º—ã**: {', '.join(data['synonyms'])}\n"
        f"üîπ **–†—É—Å—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥**: {data['ru']}\n"
        f"üîπ **–ö–∞–∑–∞—Ö—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥**: {data['kz']}"
    )
    
    await message.answer(
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º:\n\n{word_info}",
        parse_mode="Markdown",
        reply_markup=confirmation_keyboard()
    )
    await state.set_state(AddWord.confirmation)

@router.callback_query(F.data == "cancel_addition")
async def cancel_addition(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()

@router.callback_query(F.data == "confirm_addition")
async def confirm_addition(callback_query: CallbackQuery, state: FSMContext):
    global dictionary  # –û–±—ä—è–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

    data = await state.get_data()
    dictionary = load_data()  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä—å
    dictionary[data['word']] = {
        "synonyms": data['synonyms'],
        "ru": data['ru'],
        "kz": data['kz']
    }

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    save_data(dictionary)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Å–ª–æ–≤–∞—Ä—è
    await callback_query.message.edit_text("‚úÖ –°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å!")
    await state.clear()

@router.callback_query(F.data == "cancel_addition")
async def cancel_addition(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()

def generate_alphabet_keyboard():
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ —Å –±—É–∫–≤–∞–º–∏ –∞–ª—Ñ–∞–≤–∏—Ç–∞
    alphabet = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    builder = InlineKeyboardBuilder()
    for letter in alphabet:
        builder.button(text=letter, callback_data=f"letter_{letter}")
    builder.adjust(6)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    return builder.as_markup()

@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç-—Å–ª–æ–≤–∞—Ä—å. –ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –∏ —è –ø–µ—Ä–µ–≤–µ–¥—É –µ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π –∏ –∫–∞–∑–∞—Ö—Å–∫–∏–π.\n\n"
        "üë®‚Äçüè´ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "üîπ `/help` - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞\n"
        "üîπ `/list` - —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –±—É–∫–≤—É\n"
        "üîπ `/add_word` - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)\n\n"
        "üí° –í–≤–µ–¥–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, —á—Ç–æ–±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é.",
        reply_markup=main,
        parse_mode="Markdown"
    )

@router.message(Command('help'))
async def cmd_help(message: Message):
    await message.answer(
        "üìö *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –∏ —Å–∏–Ω–æ–Ω–∏–º—ã.\n"
        "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/list`, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –±—É–∫–≤—É –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–∞.\n"
        "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/random_word`, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ.\n"
        "4. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `/add_word`.\n\n"
        "üí° –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤–≤–µ–¥–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞', —á—Ç–æ–±—ã –ø—Ä–µ—Ä–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é.\n\n"
        "üë®‚Äçüè´ *–ö–æ–º–∞–Ω–¥—ã:*\n"
        "üîπ `/start` - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "üîπ `/list` - —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –ø–æ –±—É–∫–≤–∞–º\n"
        "üîπ `/help` - –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏\n"
        "üîπ `/add_word` - –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)\n"
        "üîπ `/random_word` - –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ",
        parse_mode="Markdown"
    )


@router.message(Command('random_word'))
async def cmd_random_word(message: Message):
    if not dictionary:
        await message.answer("‚ö†Ô∏è –°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã `/add_word`.")
        return
    
    word, details = random.choice(list(dictionary.items()))
    synonyms = details.get("synonyms", [])
    ru = details.get("ru", "–ù–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞")
    kz = details.get("kz", "–ù–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞")
    
    response = (
        f"‚ú® *–°–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ: {word}*\n\n"
        f"üîπ *–°–∏–Ω–æ–Ω–∏–º—ã*: {', '.join(synonyms) if synonyms else '–ù–µ—Ç —Å–∏–Ω–æ–Ω–∏–º–æ–≤'}\n"
        f"üî∏ *–ù–∞ —Ä—É—Å—Å–∫–æ–º*: {ru}\n"
        f"üî∏ *–ù–∞ –∫–∞–∑–∞—Ö—Å–∫–æ–º*: {kz}"
    )
    
    await message.answer(response, parse_mode="Markdown")

@router.message(Command('list'))
async def cmd_list(message: Message):
    await message.answer(
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤:",
        reply_markup=generate_alphabet_keyboard()
    )

@router.callback_query(lambda c: c.data and c.data.startswith('letter_'))
async def handle_letter_selection(callback_query: CallbackQuery):
    letter = callback_query.data.split('_')[1]  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –±—É–∫–≤—É
    words = sorted(word for word in dictionary.keys() if word.startswith(letter))
    
    if words:
        response = f"üìÉ *–°–ª–æ–≤–∞ –Ω–∞ –±—É–∫–≤—É {letter}:*\n\n" + "\n".join(f"üîπ {word}" for word in words)
    else:
        response = f"‚ö†Ô∏è –ù–∞ –±—É–∫–≤—É {letter} –Ω–µ—Ç —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ."
    
    await callback_query.message.edit_text(response, parse_mode="Markdown")

@router.message()
async def handle_word(message: Message):
    word = message.text.strip().capitalize()  # –ü—Ä–∏–≤–æ–¥–∏–º —Å–ª–æ–≤–æ –∫ –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤–µ
    result = dictionary.get(word)
    
    if result:
        synonyms = result.get("synonyms", [])
        ru = result.get("ru", "")
        kz = result.get("kz", "")
        response = (
            f"‚ú® *{word}*\n\n"
            f"üîπ *–°–∏–Ω–æ–Ω–∏–º—ã*: {', '.join(synonyms)}\n"
            f"üî∏ *–ù–∞ —Ä—É—Å—Å–∫–æ–º*: {ru}\n"
            f"üî∏ *–ù–∞ –∫–∞–∑–∞—Ö—Å–∫–æ–º*: {kz}"
        )
    else:
        # Find closest matches
        closest_matches = process.extract(word, dictionary.keys(), limit=3)
        suggestions = "\n".join([f"üîπ {match[0]}" for match in closest_matches])
        response = (
            f"‚ö†Ô∏è –°–ª–æ–≤–æ *{word}* –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä–µ.\n\n"
            f"–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:\n{suggestions}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è."
        )
    
    await message.answer(response, parse_mode="Markdown")
